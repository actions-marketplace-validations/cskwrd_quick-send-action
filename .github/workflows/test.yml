name: 'build-test'
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

jobs:
  build: # make sure build/ci work properly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          npm install
      - run: |
          npm run all
  test: # make sure the action works on a clean machine without building
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Haraka
        run: npm install -g Haraka

      - name: Initialize Haraka configuration
        run: |
          haraka -i ${{ github.workspace }}/haraka

          # enable debug logging
          echo DEBUG > ${{ github.workspace }}/haraka/config/loglevel
          
          # add hosts to host list
          echo "example.com" >> ${{ github.workspace }}/haraka/config/host_list

          # configure smtp
          mv ${{ github.workspace }}/haraka/config/smtp.ini ${{ github.workspace }}/haraka/config/smtp.ini.orig
          cat <<SMTP > ${{ github.workspace }}/haraka/config/smtp.ini
          listen=127.1.2.3:2525
          [headers]
          max_lines=1000
          max_received=100
          SMTP

          # configure plugins
          mv ${{ github.workspace }}/haraka/config/plugins ${{ github.workspace }}/haraka/config/plugins.orig
          cat <<PLUGINS > ${{ github.workspace }}/haraka/config/plugins
          helo.checks
          rcpt_to.in_host_list
          headers
          queue/test
          PLUGINS

          # configure systemd service
          cat <<SVC > haraka.service
          #
          # systemd service file for Haraka
          #
          # Ensure that 'daemonize' in 'smtp.ini' is set to 'false' (which is the default value).
          #

          [Unit]
          Description=Haraka MTA
          After=syslog.target network.target remote-fs.target nss-lookup.target

          [Service]
          Type=simple
          PIDFile=/var/run/haraka.pid
          ExecStart=/usr/local/bin/haraka -c ${{ github.workspace }}/haraka
          KillMode=process
          PrivateTmp=False # can't use PrivateTemp because we need to check the .eml output after the test, it gets sent to /tmp

          [Install]
          WantedBy=multi-user.target
          
          SVC
          sudo mv haraka.service /etc/systemd/system/haraka.service

      - name: Start Haraka
        run: |
          sudo systemctl start haraka
          sleep 1 # ensure haraka has time to start before running test

      - name: Create test output files
        run: |
          mkdir -p ${{ github.workspace }}/transporter-room/sub-dir
          echo "Hello" > ${{ github.workspace }}/transporter-room/hello.txt
          echo "world" > ${{ github.workspace }}/transporter-room/sub-dir/world.csv
          sleep 1 # ensure files are written before running test

      - name: Run action logic
        uses: ./
        with:
          protocol: 'smtp'
          remote-host: '127.1.2.3'
          remote-port: 2525
          # to connect without auth, set username and password to blank
          username: ''
          password: ''
          smtp-from: 'tx@example.com'
          smtp-to: 'rx@example.com'
          files: |
            transporter-room/**/*

      - name: "Validate Protocol: 'SMTP'"
        env:
          EMAIL_OUTPUT: /tmp/mail.eml
        run: |
          if [ ! -e "$EMAIL_OUTPUT" ]; then
            echo "::error ::Cannot find .eml file."
            exit 1
          fi
          strs="tx@example.com rx@example.com"
          if ! grep -q "tx@example.com" "$EMAIL_OUTPUT"; then
            echo "::error ::Resulting email appears incorrect. (FROM)"
            exit 1
          fi
          if ! grep -q "rx@example.com" "$EMAIL_OUTPUT"; then
            echo "::error ::Resulting email appears incorrect. (TO)"
            exit 1
          fi
          if ! grep -q "Here is your QuickSend File Transfer" "$EMAIL_OUTPUT"; then
            echo "::error ::Resulting email appears incorrect. (SUBJECT)"
            exit 1
          fi
          if ! grep -q "See attached" "$EMAIL_OUTPUT"; then
            echo "::error ::Resulting email appears incorrect. (BODY)"
            exit 1
          fi
          if ! grep -q "name=hello.txt" "$EMAIL_OUTPUT"; then
            echo "::error ::Resulting email appears incorrect. (Attachment #1)"
            exit 1
          fi
          if ! grep -q "name=world.csv" "$EMAIL_OUTPUT"; then
            echo "::error ::Resulting email appears incorrect. (Attachment #2)"
            exit 1
          fi

      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3

#grep -q "tx@example.com" /tmp/mail.eml && grep -q "rx@example.com" /tmp/mail.eml || (echo fail && exit 1)
